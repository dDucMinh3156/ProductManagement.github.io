/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import model.Products;
import model.sortQuantity;

/**
 *
 * @author Ta Minh Duc
 */
public class ProductList {

    private ArrayList<Products> listProducts;

    Scanner sc = new Scanner(System.in);

    public ProductList() {
        listProducts = new ArrayList<>();
    }

    //-- load data from file
    public boolean LoadFromFile(String filename) {
        try {
            File f = new File(filename);
            if (!f.exists()) {
                System.out.println("The file does not existed!!!");
                return false;
            } else {
                BufferedReader read = new BufferedReader(new FileReader(f));
                String line = read.readLine();
                //-- separate product information into categories

                while (line != null) {
                    String[] sP = line.split(", ");
                    if (sP.length <= 1) {
                        break;
                    }
                    String productID = sP[0].trim();
                    String productName = sP[1].trim();
                    float unitPrice = Float.parseFloat(sP[2].trim());
                    int Quantity = Integer.parseInt(sP[3].trim());
                    String Status = sP[4].trim();
                    Products loadProducts = new Products(productID, productName, unitPrice, Quantity, Status);
                    listProducts.add(loadProducts);
                    line = read.readLine();
                }
                read.close();
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    //-- save data to file
    public boolean saveToFile(String filename) {
        try {
            PrintWriter pw = new PrintWriter(filename);
            for (Products product : listProducts) {
                pw.println(product.getProductID() + ", " + product.getProductName() + ", "
                        + product.getUnitPrice() + ", " + product.getQuantity() + ", " + product.getStatus());
            }
            pw.flush();
            pw.close();
            System.out.println("Data product is save successfully!");
            return true;
        } catch (Exception e) {
            System.out.println("Data product has not been saved!!!");
            e.printStackTrace();
            return false;
        }
    }

    //-- option 1
    public void addProduct() {
        boolean ask;
        do {
            try {
                //-- enter productID, productName, unitPrice, Quantity, Status
                String aProductID = Utils.getString("Enter product ID: ").trim();

                String aProductName = Utils.getString("Enter name of product (at least 5 characters without spaces): ").trim();
                while (aProductName.length() <= 4 || aProductName.contains(" ")) {
                    System.out.println("Wrong format!!! [Need at least 5 characters without spaces]");
                    aProductName = Utils.getString("Enter name of product (at least 5 characters without spaces): ").trim();
                }

                float aUnitPrice = Utils.getFloat("Enter the unit price [0-10000]: ", 0, 10000);

                int aQuantity = Utils.getInt("Enter the quantity [0-1000]: ", 0, 1000);

                System.out.println("Enter the status of product [1. Available/2. Not Available]: ");
                int choice = sc.nextInt();
                while (choice < 1 && choice > 2) {
                    System.out.println("Invalid choice. Try again!!!");
                    choice = sc.nextInt();
                }
                String aStatus = null;

                switch (choice) {
                    case 1:
                        aStatus = "Available";
                        break;
                    case 2:
                        aStatus = "Not Available";
                        break;
                    default:
                        System.out.println("");
                        break;
                }

                Products nProducts = new Products(aProductID, aProductName, aUnitPrice, aQuantity, aStatus);
                listProducts.add(nProducts);
                System.out.println("Data product is added successfully!");

            } catch (Exception e) {
                System.out.println("Data product has not been added!!!");
                e.printStackTrace();
            }

            ask = Utils.confirmYesNo("Do you want continue create? [Y:yes/N:no]");
        } while (ask);

    }

    //-- option 4.1 update
    public void updateProduct() {
        boolean ask;
        do {
            try {
                Scanner sc = new Scanner(System.in);

                //-- check exist
                String uProductID = Utils.getString("Enter the product ID want to update: ").toUpperCase();
                int pos = searchID(uProductID);
                while (pos < 0) {
                    System.out.println("Product does not exist");
                    uProductID = Utils.getString("Enter the product ID want to update: ");
                    pos = searchID(uProductID);
                }
                //-- show old info
                System.out.println("Old information product:");
                System.out.println(listProducts.get(pos).toString());
                //-- set new data to list product
                Products uProduct = listProducts.get(pos);

                //-- case name: info blank
                System.out.println("Enter the product name want to update (at least 5 characters without spaces): ");
                String uProductName = sc.nextLine().trim();
                if (!uProductName.isEmpty()) {
                    while (uProductName.length() <= 4 || uProductName.contains(" ")) {
                        System.out.println("Wrong format!!! Need at least 5 characters without spaces");
                        uProductName = Utils.getString("Enter name of product (at least 5 characters without spaces): ").trim();
                    }
                    uProduct.setProductName(uProductName);
                }

                //-- case UnitPrice update
                float uUnitPrice = Utils.getFloatUpdate("Enter the unit price want to update [0-10000]: ", 0, 10000);
                if (uUnitPrice > 1) {
                    uProduct.setUnitPrice(uUnitPrice);
                }

                //-- case Quantity
                int uQuantity = Utils.getIntUpdate("Enter the quantity want to update [0-1000]: ", 0, 1000);
                if (uQuantity > 1) {
                    uProduct.setQuantity(uQuantity);
                }

                //-- case status
                System.out.println("Enter the status of product [1. Available/2. Not Available]: ");
                int choice = sc.nextInt();
                while (choice < 1 && choice > 2) {
                    System.out.println("Invalid choice. Try again!!!");
                    choice = sc.nextInt();
                }
                String uStatus = null;

                switch (choice) {
                    case 1:
                        uStatus = "Available";
                        break;
                    case 2:
                        uStatus = "Not Available";
                        break;
                    default:
                        System.out.println("");
                        break;
                }
                uProduct.setStatus(uStatus);

                System.out.println("Data product is updated successfully!");

            } catch (Exception e) {
                System.out.println("Data product has not been updated!!!");
                e.printStackTrace();
            }

            ask = Utils.confirmYesNo("Do you want continue update? [Y: yes/N: no]");
        } while (ask);
    }

    //-- option 4.2 delete
    public void deleteProduct() {
        boolean ask;
        do {
            Scanner sc = new Scanner(System.in);
            System.out.println("Enter product ID: ");
            String removeID = sc.nextLine().trim().toUpperCase();
            int pos = searchID(removeID);
            if (pos < 0) {
                System.out.println("Product does not exist");
            } else {
                System.out.println("Information product:");
                System.out.println(listProducts.get(pos).toString());
                System.out.println("Are you sure you want to DELETE? [Y: yes/N: no]");
                String askDelete = sc.nextLine().trim();
                if (askDelete.equalsIgnoreCase("Y")) {
                    listProducts.remove(pos);
                    System.out.println("Remove data product successfully!");
                }
            }

            ask = Utils.confirmYesNo("Do you want continue delete? [Y:yes/N:no]");
        } while (ask);
    }

    public int searchID(String prID) {
        int N = listProducts.size();
        for (int i = 0; i <= N - 1; i++) {
            if (listProducts.get(i).getProductID().equals(prID)) {
                return i;
            }
        }
        return -1;
    }

    //-- option 2
    public void checkProductID() {
        boolean ask;
        do {
            Scanner sc = new Scanner(System.in);
            System.out.println("Enter the product ID want to search:");
            String prID = sc.nextLine().trim().toUpperCase();
            Products foundProduct = null;
            for (Products product : listProducts) {
                if (product.getProductID().equals(prID)) {
                    foundProduct = product;
                    break;
                }
            }
            if (foundProduct != null) {
                System.out.println("Exist Product");
                //System.out.println(foundProduct.toString());
            } else {
                System.out.println("No product found!!!");
            }

            ask = Utils.confirmYesNo("Do you want continue check? [Y:yes/N:no]");
        } while (ask);

    }

    //-- option 3
    public void searchProductName() {
        boolean ask;
        do {
            Scanner sc = new Scanner(System.in);
            System.out.println("Enter a part of product name: ");
            String aPartOfName = sc.nextLine().toLowerCase().trim();

            //-- case list NULL
            if (listProducts.isEmpty()) {
                System.out.println("Have no any Product.");
            } else {
                System.out.println("|-----------------------------List of products--------------------------------------|");
                System.out.println("|------------|----------------------------|--------------|----------|---------------|");
                System.out.println("| Product ID |        Product Name        |  Unit Price  | Quantity |    Status     |");
                System.out.println("|------------|----------------------------|--------------|----------|---------------|");

                //Collections.sort(listProducts);
                Collections.sort(listProducts, new Products());
                for (Products name : listProducts) {
                    String namePart = name.getProductName().toLowerCase();
                    if (namePart.contains(aPartOfName)) {
                        System.out.println(name);
                    }
                }
                System.out.println("|-----------------------------------------------------------------------------------|");
            }

            //-- case list not NULL
            ask = Utils.confirmYesNo("Do you want continue search? [Y:yes/N:no]");
        } while (ask);

    }

    //-- sort product name in ascending order
//    @Override
//    public int compare(Products prd1, Products prd2) {
//        return prd1.getProductName().compareToIgnoreCase(prd2.getProductName());
//    }
    //-- opstion 6
    public void listAllProduct() {
        System.out.println("|-----------------------------List of products--------------------------------------|");
        System.out.println("|------------|----------------------------|--------------|----------|---------------|");
        System.out.println("| Product ID |        Product Name        |  Unit Price  | Quantity |    Status     |");
        System.out.println("|------------|----------------------------|--------------|----------|---------------|");
        //-- sort product Quantity descending; same Quantity -> sort UnitPrice ascending

        Collections.sort(listProducts, new sortQuantity());
        //Collections.sort(listProducts, new sortUnitPrice());
        for (Products allproducts : listProducts) {
            System.out.println(allproducts);
        }
        System.out.println("|-----------------------------------------------------------------------------------|");
    }

}
